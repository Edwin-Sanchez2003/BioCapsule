"""
    BioCapsule
    Process Results

    This module takes the jons results generated from 
    the run_tests.py and gets more details and information
    from the data.
"""

import os
import tools


def main():
    append_info(
        results_dir="./MOBIO_extracted/test_results/",
        MOBIO_dataset_dir="./MOBIO_extracted/one_sec_intervals/",
    )  # end append_info


# this function gets results that allow us to make
# a table comparable to the paper:
# LIGHTWEIGHT AND SECURE FACE-BASED ACTIVE AUTHENTICATION FOR MOBILE USERS
# (KEYKHAIE AND PIERRE, 2023)
def get_comparable_results(file_path: str) -> None:
    """
    Gets the EER per location for the MOBIO
    dataset, as well as the standard deviation.

    WRITES BACK TO THE GIVEN FILE (with appended information)!

    Inputs:
    -------
    file_path : str
        The test json file to calculate results for. Assumed
        to be in the format generated by run_tests.py.
    """
    pass


# convenience function for appending data
def append_info(results_dir: str, MOBIO_dataset_dir: str) -> None:
    # get results files in the results_dir
    file_paths = tools.get_files_with_paths(input_dir=results_dir)

    # loop over file_paths, adding location info to each file
    num_files = len(file_paths)
    for i, file_path in enumerate(file_paths):
        print(
            f"File {i+1} of {num_files} | File Name: {os.path.basename(file_path)}"
        )
        add_location_information(
            file_path=file_path,
            MOBIO_dataset_dir=MOBIO_dataset_dir,
        )  # end add_location_information


# reads in a test result file from run_tests.py and
# adds in location information for each subject
def add_location_information(file_path: str, MOBIO_dataset_dir: str) -> None:
    # gets a dict with MOBIO locations as keys
    # and subjects at that location as the values
    loc_subj_map = get_subj_at_loc(dataset_dir=MOBIO_dataset_dir)

    # open the given results file
    results = tools.load_json_file(file_path=file_path)

    # loop over each subject, adding in their location information
    num_subjects = len(results["per_subject_results"])
    for i, subject in enumerate(results["per_subject_results"]):
        print(f" Subject: {subject['subject_id']} | {i+1} of {num_subjects}")
        # loop over all the locations in MOBIO
        for loc, subj_list in loc_subj_map.items():
            # check if the subject is in the list for this location
            # if yes, add in the location information to the subject's
            # data and print out the info for visual confirmation
            if tools.is_in_list(subject["subject_id"], subj_list):
                subject["location"] = loc
                print(f"subject {subject['subject_id']} is at loc: {loc}")

    # write the appended results dict back into a json file
    tools.write_to_json(file_path=file_path, data=results)


# generates a dict where the key is one of
# the six MOBIO locations and the value is a
# list of subjects at that location
def get_subj_at_loc(dataset_dir: str) -> dict:
    # a list of locations from the dataset directory
    # MOBIO -> location dirs -> subject dirs
    mobio_locations = [
        "but",
        "idiap",
        "lia",
        "uman",
        "unis",
        "uoulu",
    ]  # end mobio locations

    loc_subj_map = {}
    for loc in mobio_locations:
        # get a list of subjects at a give location
        loc_subj_map[loc] = os.listdir(os.path.join(dataset_dir, loc))
    return loc_subj_map


if __name__ == "__main__":
    main()
